defmodule Curriclick.Repo.Migrations.CreateCompaniesAndJobListings do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:job_requirements, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :requirement_text, :text, null: false
      add :is_required, :boolean, null: false, default: true
      add :job_listing_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:job_listings, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:job_requirements) do
      modify :job_listing_id,
             references(:job_listings,
               column: :id,
               name: "job_requirements_job_listing_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:job_listings) do
      add :job_role_name, :text, null: false
      add :job_description, :text, null: false
      add :company_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:companies, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:job_listings) do
      modify :company_id,
             references(:companies,
               column: :id,
               name: "job_listings_company_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:companies) do
      add :name, :text, null: false
      add :industry, :text, null: false
      add :cnpj, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:companies, [:cnpj], name: "companies_unique_cnpj_index")
  end

  def down do
    drop_if_exists unique_index(:companies, [:cnpj], name: "companies_unique_cnpj_index")

    alter table(:companies) do
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :cnpj
      remove :industry
      remove :name
    end

    drop constraint(:job_listings, "job_listings_company_id_fkey")

    alter table(:job_listings) do
      modify :company_id, :uuid
    end

    drop table(:companies)

    alter table(:job_listings) do
      remove :updated_at
      remove :inserted_at
      remove :company_id
      remove :job_description
      remove :job_role_name
    end

    drop constraint(:job_requirements, "job_requirements_job_listing_id_fkey")

    alter table(:job_requirements) do
      modify :job_listing_id, :uuid
    end

    drop table(:job_listings)

    drop table(:job_requirements)
  end
end
